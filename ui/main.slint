import { Theme } from "globals.slint";

export enum TimerType { focus, short-break, long-break }
export enum TimerAction { start, stop, reset, skip }

export component Main inherits VerticalLayout {
    width: 100%;
    alignment: space-between;
    spacing: 4rem;

    in-out property <bool> active: false;

    in property <duration> target-time: 90s;
    in-out property <duration> remaining-time: root.target-time;

    in property <TimerType> active-timer: focus;
    in property <int> active-round: 1;
    
    callback action-timer(TimerAction);

    callback tick(duration);
    callback change-timer();

    tick(passed-time) => {
        root.remaining-time = max(root.remaining-time - passed-time, 0);

        if (root.remaining-time == 0) {
            change-timer();
        }
    }

    function time-remaining() -> string {
        floor(root.remaining-time / 60s) + ":" + ((mod(root.remaining-time, 60s) / 1s) < 10 ? "0" : "") + floor(mod(root.remaining-time, 60s) / 1s)
    }
    function get-timer-string() -> string {
        if (root.active-timer == TimerType.focus) {
            "FOCUS"
        } else if (root.active-timer == TimerType.short-break) {
            "SHORT BREAK"
        } else {
            "LONG BREAK"
        }
    }
    function get-timer-color() -> brush {
        if (root.active-timer == TimerType.focus) {
            Theme.focus-round
        } else if (root.active-timer == TimerType.short-break) {
            Theme.short-break
        } else {
            Theme.long-break
        }
    }

    Rectangle {
        height: 300px;

        Image {
            source: @image-url("../assets/CirclePlaceholder.svg");
            width: 240px;
            height: 240px;
            colorize: Theme.short-break.darker(0.3);
        }
        Image {
            source: @image-url("../assets/Circle.svg");
            width: 240px;
            height: 240px;
            colorize: @linear-gradient(
                135deg,
                Theme.accent,
                get-timer-color()
            );
        }
        Rectangle {
            width: 240px;
            height: 240px;

                Timer := Text {
                    text: root.time-remaining();
                    horizontal-alignment: center;
                    vertical-alignment: bottom;
                    font-size: 50pt;
                    font-family: "Inconsolata";
                    letter-spacing: 0.5pt;
                    color: Theme.text-clr-primary.brighter(0.3);
                }
                Text {
                    text: get-timer-string();
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: 13pt;
                    font-weight: 700;
                    letter-spacing: 0.5pt;
                    y: parent.height * 0.7;
                }
                Rounds := Text {
                    text: "\{root.active-round} / 5";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: 11pt;
                    font-weight: 600;
                    font-family: "Montserrat";
                    y: parent.height * 0.8;
                    color: Theme.text-clr-secondary;
                }
                Rectangle {
                    width: 300px;
                    height: 300px;
                    
                    property <image> toggleImage: active ? @image-url("../assets/icons/pause.svg") : @image-url("../assets/icons/play.svg");
                    property <image> skipImage: @image-url("../assets/icons/skip.svg");
                    property <image> resetImage: @image-url("../assets/icons/reset.svg");
                
                    Rectangle {
                        width: 42px;
                        height: 42px;
                        background: Theme.foreground-darkest.transparentize(0.6);
                        border-radius: 500px;
                        x: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * cos(45deg * (0 * 0.8)));
                        y: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * sin(45deg * (0 * 0.8)));
                        drop-shadow-color: #000.transparentize(0.755);
                        drop-shadow-offset-x: 8px;
                        drop-shadow-offset-y: 8px;
                        drop-shadow-blur: 15px;
                
                        animate background {
                            duration: 300ms;
                        }
                
                        Image {
                            source: toggleImage;
                            image-fit: contain;
                            width: 60%;
                            height: 60%;
                            colorize: Theme.accent.brighter(1.2);
                        }
                
                        ToggleBtn := TouchArea {
                            clicked => {
                                if (root.active) {
                                    root.action-timer(TimerAction.stop)
                                } else {
                                    root.action-timer(TimerAction.start)
                                }
                            }
                        }
                
                        states [
                            hvr-act when ToggleBtn.has-hover: {
                                background: Theme.foreground-darkest.transparentize(0.4);
                            }
                        ]
                    }
                    Rectangle {
                        width: 42px;
                        height: 42px;
                        background: Theme.foreground-darkest.transparentize(0.6);
                        border-radius: 500px;
                        x: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * cos(45deg * (1 * 0.8)));
                        y: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * sin(45deg * (1 * 0.8)));
                        drop-shadow-color: #000.transparentize(0.755);
                        drop-shadow-offset-x: 8px;
                        drop-shadow-offset-y: 8px;
                        drop-shadow-blur: 15px;
                
                        animate background {
                            duration: 300ms;
                        }
                
                        Image {
                            source: skipImage;
                            image-fit: contain;
                            width: 60%;
                            height: 60%;
                            colorize: Theme.accent.brighter(1.2);
                        }
                
                        SkipBtn := TouchArea {
                            clicked => { root.action-timer(TimerAction.skip) }
                        }
                
                        states [
                            hvr-act when SkipBtn.has-hover: {
                                background: Theme.foreground-darkest.transparentize(0.4);
                            }
                        ]
                    }
                    Rectangle {
                        width: 42px;
                        height: 42px;
                        background: Theme.foreground-darkest.transparentize(0.6);
                        border-radius: 500px;
                        x: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * cos(45deg * (2 * 0.8)));
                        y: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * sin(45deg * (2 * 0.8)));
                        drop-shadow-color: #000.transparentize(0.755);
                        drop-shadow-offset-x: 8px;
                        drop-shadow-offset-y: 8px;
                        drop-shadow-blur: 15px;
                
                        animate background {
                            duration: 300ms;
                        }
                
                        Image {
                            source: resetImage;
                            image-fit: contain;
                            width: 60%;
                            height: 60%;
                            colorize: Theme.accent.brighter(1.2);
                        }
                
                        ResetBtn := TouchArea {
                            clicked => { root.action-timer(TimerAction.reset) }
                        }
                
                        states [
                            hvr-act when ResetBtn.has-hover: {
                                background: Theme.foreground-darkest.transparentize(0.4);
                            }
                        ]
                    }
                
                }
        }
    }
}