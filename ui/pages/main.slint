import { HorizontalBox, VerticalBox } from "std-widgets.slint";
import { Slider } from "../slider.slint";
import { Theme, TimerConfig, TimerAction, VolumeState, TimerType, Settings, IntSettingTypes } from "../globals.slint";

export component Main inherits VerticalLayout {
    alignment: space-between;
    spacing: 4rem;

    in-out property <bool> active;

    in-out property <duration> target-time;
    in-out property <duration> remaining-time;

    in-out property <TimerConfig> timer-config;

    in-out property <TimerType> active-timer;
    in-out property <int> active-round;

    in-out property <image> circle-progress;
    
    callback action-timer(TimerAction);

    function time-remaining() -> string {
        floor(root.remaining-time / 60s) + ":" + ((mod(root.remaining-time, 60s) / 1s) < 10 ? "0" : "") + floor(mod(root.remaining-time, 60s) / 1s)
    }
    function get-timer-string() -> string {
        if (root.active-timer == TimerType.focus) {
            "FOCUS"
        } else if (root.active-timer == TimerType.short-break) {
            "BREAK"
        } else {
            "LONG BREAK"
        }
    }
    function get-timer-color() -> brush {
        if (root.active-timer == TimerType.focus) {
            Theme.focus-round
        } else if (root.active-timer == TimerType.short-break) {
            Theme.short-break
        } else {
            Theme.long-break
        }
    }

    Rectangle {
        height: 300px;

        Image {
            source: @image-url("../../assets/CirclePlaceholder.svg");
            width: 240px;
            height: 240px;
            colorize: Theme.short-break.darker(0.3);
        }
        Image {
            source: circle-progress;
            width: 240px;
            height: 240px;
            colorize: @linear-gradient(
                135deg,
                Theme.accent,
                get-timer-color()
            );
        }
        Rectangle {
            width: 240px;
            height: 240px;

            Timer := Text {
                text: root.time-remaining();
                horizontal-alignment: center;
                vertical-alignment: bottom;
                font-size: 50pt;
                font-family: "Inconsolata";
                letter-spacing: 0.5pt;
                color: Theme.text-clr-primary.brighter(0.3);
            }
            Text {
                text: get-timer-string();
                horizontal-alignment: center;
                vertical-alignment: center;
                font-size: 13pt;
                font-weight: 700;
                letter-spacing: 0.5pt;
                y: parent.height * 0.7;
                color: Theme.foreground.brighter(0.1);
            }
            Rounds := Text {
                text: "\{root.active-round} / \{root.timer-config.rounds}";
                horizontal-alignment: center;
                vertical-alignment: center;
                font-size: 11pt;
                font-weight: 600;
                font-family: "Montserrat";
                y: parent.height * 0.8;
                color: Theme.text-clr-secondary;
            }
            Rectangle {
                width: 300px;
                height: 300px;
                
                property <image> toggleImage: active ? @image-url("../../assets/icons/pause.svg") : @image-url("../../assets/icons/play.svg");
                property <image> skipImage: @image-url("../../assets/icons/skip.svg");
                property <image> resetImage: @image-url("../../assets/icons/reset.svg");
            
                toggle := Rectangle {
                    width: 42px;
                    height: 42px;
                    background: Theme.foreground-darkest.transparentize(0.6);
                    border-radius: 500px;
                    x: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * cos(45deg * (0 * 0.8)));
                    y: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * sin(45deg * (0 * 0.8)));
                    drop-shadow-color: #000.transparentize(0.755);
                    drop-shadow-offset-x: 8px;
                    drop-shadow-offset-y: 8px;
                    drop-shadow-blur: 15px;
            
                    animate background {
                        duration: 300ms;
                    }
            
                    Image {
                        source: toggleImage;
                        image-fit: contain;
                        width: 60%;
                        height: 60%;
                        colorize: Theme.accent.brighter(1.2);
                    }
            
                    ToggleBtn := TouchArea {
                        mouse-cursor: MouseCursor.pointer;
                        clicked => {
                            if (root.active) {
                                root.action-timer(TimerAction.stop)
                            } else {
                                root.action-timer(TimerAction.start)
                            }
                        }
                    }
            
                    states [
                        hvr-act when ToggleBtn.has-hover: {
                            background: Theme.foreground-darkest.transparentize(0.4);
                        }
                    ]
                }
                skip := Rectangle {
                    width: 42px;
                    height: 42px;
                    background: Theme.foreground-darkest.transparentize(0.6);
                    border-radius: 500px;
                    x: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * cos(45deg * (1 * 0.8)));
                    y: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * sin(45deg * (1 * 0.8)));
                    drop-shadow-color: #000.transparentize(0.755);
                    drop-shadow-offset-x: 8px;
                    drop-shadow-offset-y: 8px;
                    drop-shadow-blur: 15px;
            
                    animate background {
                        duration: 300ms;
                    }
            
                    Image {
                        source: skipImage;
                        image-fit: contain;
                        width: 60%;
                        height: 60%;
                        colorize: Theme.accent.brighter(1.2);
                    }
            
                    SkipBtn := TouchArea {
                        mouse-cursor: MouseCursor.pointer;
                        clicked => { root.action-timer(TimerAction.skip) }
                    }
            
                    states [
                        hvr-act when SkipBtn.has-hover: {
                            background: Theme.foreground-darkest.transparentize(0.4);
                        }
                    ]
                }
                reset := Rectangle {
                    width: 42px;
                    height: 42px;
                    background: Theme.foreground-darkest.transparentize(0.6);
                    border-radius: 500px;
                    x: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * cos(45deg * (2 * 0.8)));
                    y: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * sin(45deg * (2 * 0.8)));
                    drop-shadow-color: #000.transparentize(0.755);
                    drop-shadow-offset-x: 8px;
                    drop-shadow-offset-y: 8px;
                    drop-shadow-blur: 15px;
            
                    animate background {
                        duration: 300ms;
                    }
            
                    Image {
                        source: resetImage;
                        image-fit: contain;
                        width: 60%;
                        height: 60%;
                        colorize: Theme.accent.brighter(1.2);
                    }
            
                    ResetBtn := TouchArea {
                        mouse-cursor: MouseCursor.pointer;
                        clicked => { root.action-timer(TimerAction.reset) }
                    }
            
                    states [
                        hvr-act when ResetBtn.has-hover: {
                            background: Theme.foreground-darkest.transparentize(0.4);
                        }
                    ]
                }
                volume := Rectangle {
                    width: 42px;
                    height: 42px;
                    background: Theme.foreground-darkest.transparentize(0.6);
                    border-radius: 500px;
                    x: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * cos(45deg * (4 * 0.8)));
                    y: (parent.width / 2 - self.width / 2) + ((parent.width / 2) * sin(45deg * (4 * 0.8)));
                    drop-shadow-color: #000.transparentize(0.755);
                    drop-shadow-offset-x: 8px;
                    drop-shadow-offset-y: 8px;
                    drop-shadow-blur: 15px;
            
                    animate background {
                        duration: 300ms;
                    }

                    Image {
                        source: @image-url("../../assets/icons/volume.svg");
                        image-fit: contain;
                        width: 60%;
                        height: 60%;
                        colorize: Theme.foreground-darker.brighter(0.1);
                    }
            
                    VolumetBtn := TouchArea {
                        mouse-cursor: MouseCursor.pointer;
                        clicked => {
                            volume-popup.show();
                        }
                    }
            
                    states [
                        hvr-act when VolumetBtn.has-hover: {
                            background: Theme.foreground-darkest.transparentize(0.4);
                        }
                    ]
                }
                volume-popup := PopupWindow {
                    height: 150px;
                    x: 0;
                    y: volume.y + 5rem;

                    volume-slider-container := Rectangle {
                        height: parent.height;
                        border-radius: 5px;
                        background: Theme.background-light.transparentize(0.3);

                        HorizontalBox {
                            VerticalBox {
                                alerts-slider := Slider {
                                    vertical: true;
                                    minimum: 0;
                                    maximum: 100;
                                    color: Theme.short-break.darker(0.2);
                                    placeholder-color: Theme.foreground-darkest.darker(1);
                                    fill-color: Theme.short-break.darker(0.2);
                                    bob-hover-color: Theme.accent.brighter(0.8);
                                    value <=> Settings.alerts-volume;
                                    slider-width: 2.5px;
                                    slider-border-radius: 2px;
        
                                    value-changed(int) => {
                                        Settings.int-changed(IntSettingTypes.AlertsVolume, int)
                                    }
                                }
                                Rectangle {
                                    width: 20px;
                                    height: 20px;
                                    
                                    Image {
                                        image-fit: contain;
                                        width: 20px;
                                        height: 20px;
                                        colorize: Theme.short-break.darker(0.2);
                                        
                                        states [
                                            alerts-on when alerts-slider.value > 50: {
                                                source: @image-url("../../assets/icons/alerts_on.svg");
                                            }
                                            alerts-on when alerts-slider.value > 0: {
                                                source: @image-url("../../assets/icons/alerts_down.svg");
                                            }
                                            alerts-on when alerts-slider.value == 0: {
                                                source: @image-url("../../assets/icons/alerts_off.svg");
                                            }
                                        ]
                                    }
                                    alerts-touch := TouchArea {
                                        clicked => {
                                            Settings.int-changed(
                                                IntSettingTypes.AlertsVolume,
                                                alerts-slider.value > 0 ? 0 : 100
                                            )
                                        }
                                    }
                                }
                            }
                            VerticalBox {
                                ambient-slider := Slider {
                                    vertical: true;
                                    minimum: 0;
                                    maximum: 100;
                                    color: Theme.short-break.darker(0.2);
                                    placeholder-color: Theme.foreground-darkest.darker(1);
                                    fill-color: Theme.short-break.darker(0.2);
                                    bob-hover-color: Theme.accent.brighter(0.8);
                                    value <=> Settings.ambient-volume;
                                    slider-width: 2.5px;
                                    slider-border-radius: 2px;
        
                                    value-changed(int) => {
                                        Settings.int-changed(IntSettingTypes.AmbientVolume, int)
                                    }
                                }
                                Rectangle {
                                    width: 20px;
                                    height: 20px;

                                    Image {
                                        source: @image-url("../../assets/icons/ambient_on.svg");
                                        image-fit: contain;
                                        width: 20px;
                                        height: 20px;
                                        colorize: Theme.short-break.darker(0.2);
                                        
                                        states [
                                            ambient-on when ambient-slider.value > 50: {
                                                source: @image-url("../../assets/icons/ambient_on.svg");
                                            }
                                            ambient-on when ambient-slider.value > 0: {
                                                source: @image-url("../../assets/icons/ambient_down.svg");
                                            }
                                            ambient-on when ambient-slider.value == 0: {
                                                source: @image-url("../../assets/icons/ambient_off.svg");
                                            }
                                        ]
                                    }
                                    ambient-touch := TouchArea {
                                        clicked => {
                                            Settings.int-changed(
                                                IntSettingTypes.AmbientVolume,
                                                ambient-slider.value > 0 ? 0 : 100
                                            )
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}