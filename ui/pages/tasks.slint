import { HorizontalBox, VerticalBox, ScrollView } from "std-widgets.slint";
import { Theme, TaskStatus, Tasks } from "../globals.slint";

component TaskBox inherits Rectangle {
    in-out property <TaskStatus> status;
    in-out property <string> text;
    in-out property <string> id;

    callback clicked();

    background: Theme.foreground-darkest.transparentize(0.9);
    border-radius: 6px;
    drop-shadow-color: get_color(root.status).transparentize(0.9);
    drop-shadow-blur: 20px;

    animate background {
        duration: 200ms;
        easing: ease-out;
    }

    function get_color(status: TaskStatus) -> color {
        status == TaskStatus.Completed ? #c880ff : status == TaskStatus.Cancelled ? #eec3bf : #fcc991
    }

    HorizontalBox {
        spacing: 1.2rem;

        status := Rectangle {
            width: 20px;
            height: self.width;

            Image {
                source: root.status == TaskStatus.Completed ? @image-url("../../assets/icons/radio_checked.svg") : root.status == TaskStatus.Cancelled ? @image-url("../../assets/icons/radio_cancelled.svg") : @image-url("../../assets/icons/radio_unchecked.svg");
                colorize: get_color(root.status);
                image-fit: contain;
                width: 100%;
            }
        }
        task-input := Text {
            text: root.text;
            horizontal-alignment: left;
            vertical-alignment: center;
            font-size: 11.5pt;
            color: Theme.foreground-darker.brighter(0.5);
            wrap: word-wrap;
        }
    }
    task-touch := TouchArea {
        clicked => { root.clicked() }
        pointer-event(e) => {
            if (e.button == PointerEventButton.left || e.button == PointerEventButton.right) {
                root.clicked()
            }
        }

    }

    states [
        hovered when task-touch.has-hover: {
            background: Theme.foreground.transparentize(0.8);
        }
    ]
}

export component TasksView inherits ScrollView {
    
    function get_color(status: TaskStatus) -> color {
        status == TaskStatus.Completed ? #c880ff : status == TaskStatus.Cancelled ? #eec3bf : #fcc991
    }

    VerticalBox {
        padding: 1.5rem;

        HorizontalBox {
            Text {
                text: "Tasks";
                font-family: "Kanit";
                font-size: 15pt;
                font-weight: 600;
                letter-spacing: 0.5px;
                horizontal-alignment: left;
                color: Theme.foreground;
            }
            Rectangle {
                border-radius: 6px;
                height: 30px;
                width: 120px;
    
                animate background {
                    duration: 200ms;
                    easing: ease-in-out;
                }
                
                Text {
                    text: "18 / 02 / 2024";
                    font-size: 12pt;
                    font-weight: 550;
                    vertical-alignment: center;
                    color: Theme.foreground-darkest;
                }
                
                date-touch := TouchArea {
                    mouse-cursor: MouseCursor.pointer;
    
                    clicked => {}
                }
                
                states [
                    hovered when date-touch.has-hover: {
                        background: #fff.transparentize(0.9);
                    }
    
                ]
            }
        }
        VerticalBox {
            spacing: 1rem;
            
            task-add := Rectangle {
                background: Theme.foreground-darkest.transparentize(0.9);
                border-radius: 6px;
            
                animate background {
                    duration: 200ms;
                    easing: ease-out;
                }
            
                HorizontalBox {
                    status := Rectangle {
                        width: 20px;
                        height: self.width;
            
                        Image {
                            source: @image-url("../../assets/icons/radio_unchecked.svg");
                            colorize: get_color(TaskStatus.Pending);
                            image-fit: contain;
                            width: 100%;
                        }
                    }
                    Rectangle {
                        border-radius: 4px;
                        border-width: 1px;
                        border-color: task-input.has-focus ? Theme.accent : transparent;
                        animate border-color {
                            duration: 200ms;
                            easing: ease-in-out;
                        }
                        
                        HorizontalBox {
                            padding-top: 3px;
                            padding-bottom: 3px;
                            
                            task-input := TextInput {
                                horizontal-alignment: left;
                                font-size: 11.5pt;
                                color: Theme.foreground-darker.brighter(0.5);
                                wrap: word-wrap;
                                selection-background-color: get_color(TaskStatus.Cancelled);

                                accepted => {
                                    Tasks.add-task(self.text);
                                    self.text = ""
                                }
                            }
                        }
                        HorizontalBox {
                            padding-top: 3px;
                            padding-bottom: 3px;
            
                            task-placeholder := Text {
                                text: task-input.text == "" ? "Add a task" : "";
                                horizontal-alignment: left;
                                font-size: 11.5pt;
                                color: Theme.foreground-darker.darker(0.2);
                                wrap: word-wrap;
                                width: 100%;
                            }
                        }
                    }
                    add-btn := Rectangle {
                        width: 20px;
                        height: self.width;
                        border-radius: 5px;

                        animate background {
                            duration: 200ms;
                            easing: ease-in-out;
                        }
            
                        Image {
                            source: @image-url("../../assets/icons/add.svg");
                            colorize: get_color(TaskStatus.Pending);
                            image-fit: contain;
                            width: 100%;
                        }
                        add-touch := TouchArea {
                            mouse-cursor: MouseCursor.pointer;
                            clicked => {
                                Tasks.add-task(task-input.text);
                                task-input.text = ""
                            }
                        }

                        states [
                            hovered when add-touch.has-hover: {
                                background: #ccc.transparentize(0.8);
                            }
                        ]
                    }
                }
            }

            if Tasks.tasks.length == 0: Rectangle {
                Text {
                    text: "No tasks added";
                    font-size: 14pt;
                    font-weight: 550;
                    font-family: "Montserrat";
                    letter-spacing: 0.5px;
                    color: Theme.text-clr-primary;
                }
            }

            for task in Tasks.tasks: Rectangle {
                TaskBox {
                    id: task.id;
                    status: task.status;
                    text: task.text;

                    clicked => {
                        context-menu.show();
                    }
                }
                context-menu := PopupWindow {

                    Rectangle {
                        border-radius: 5px;
                        background: Theme.background-light.transparentize(0.05);

                        VerticalLayout {
                            spacing: 2px;
                            padding: 5px;
                            
                            if task.status != TaskStatus.Completed: complete-option := Rectangle {
                                border-radius: 4px;
                                animate background {
                                    duration: 150ms;
                                    easing: ease;
                                }

                                HorizontalBox {
                                    spacing: 1rem;

                                    Rectangle {
                                        width: 18px;
                                        height: self.width;

                                        Image {
                                            source: @image-url("../../assets/icons/radio_checked.svg");
                                            image-fit: contain;
                                            width: 100%;
                                            colorize: get_color(TaskStatus.Completed);
                                        }
                                    }
                                    Text {
                                        text: "Mark as done";
                                        font-size: 11pt;
                                        vertical-alignment: center;
                                        horizontal-alignment: left;
                                        color: get_color(TaskStatus.Completed);
                                    }
                                }
                                complete-touch := TouchArea {
                                    mouse-cursor: MouseCursor.pointer;
                                    clicked => { Tasks.set-status(task.id, TaskStatus.Completed) }
                                }

                                states [
                                    hovered when complete-touch.has-hover: {
                                        background: #ccc.transparentize(0.50);
                                    }
                                ]
                            }
                            if task.status != TaskStatus.Pending: pending-option := Rectangle {
                                border-radius: 4px;
                                animate background {
                                    duration: 150ms;
                                    easing: ease;
                                }

                                HorizontalBox {
                                    spacing: 1rem;

                                    Rectangle {
                                        width: 18px;
                                        height: self.width;

                                        Image {
                                            source: @image-url("../../assets/icons/radio_unchecked.svg");
                                            image-fit: contain;
                                            width: 100%;
                                            colorize: get_color(TaskStatus.Pending);
                                        }
                                    }
                                    Text {
                                        text: "Mark as pending";
                                        font-size: 11pt;
                                        vertical-alignment: center;
                                        horizontal-alignment: left;
                                        color: get_color(TaskStatus.Pending);
                                    }
                                }
                                pending-touch := TouchArea {
                                    mouse-cursor: MouseCursor.pointer;
                                    clicked => { Tasks.set-status(task.id, TaskStatus.Pending) }
                                }

                                states [
                                    hovered when pending-touch.has-hover: {
                                        background: #ccc.transparentize(0.50);
                                    }
                                ]
                            }
                            if task.status != TaskStatus.Cancelled: cancel-option := Rectangle {
                                border-radius: 4px;
                                animate background {
                                    duration: 150ms;
                                    easing: ease;
                                }

                                HorizontalBox {
                                    spacing: 1rem;

                                    Rectangle {
                                        width: 18px;
                                        height: self.width;

                                        Image {
                                            source: @image-url("../../assets/icons/radio_cancelled.svg");
                                            image-fit: contain;
                                            width: 100%;
                                            colorize: get_color(TaskStatus.Cancelled);
                                        }
                                    }
                                    Text {
                                        text: "Cancel";
                                        font-size: 11pt;
                                        vertical-alignment: center;
                                        horizontal-alignment: left;
                                        color: get_color(TaskStatus.Cancelled);
                                    }
                                }
                                cancel-touch := TouchArea {
                                    mouse-cursor: MouseCursor.pointer;
                                    clicked => { Tasks.set-status(task.id, TaskStatus.Cancelled) }
                                }

                                states [
                                    hovered when cancel-touch.has-hover: {
                                        background: #ccc.transparentize(0.50);
                                    }
                                ]
                            }
                            delete-option := Rectangle {
                                border-radius: 4px;
                                animate background {
                                    duration: 150ms;
                                    easing: ease;
                                }

                                HorizontalBox {
                                    spacing: 1rem;

                                    Rectangle {
                                        width: 18px;
                                        height: self.width;

                                        Image {
                                            source: @image-url("../../assets/icons/delete.svg");
                                            image-fit: contain;
                                            width: 100%;
                                            colorize: delete-touch.has-hover ? Theme.foreground-darker.brighter(0.5) : #f75e5e;
                                        }
                                    }
                                    Text {
                                        text: "Delete";
                                        font-size: 11pt;
                                        vertical-alignment: center;
                                        horizontal-alignment: left;
                                        color: delete-touch.has-hover ? #fff : #f75e5e;
                                    }
                                }
                                delete-touch := TouchArea {
                                    mouse-cursor: MouseCursor.pointer;
                                    clicked => { Tasks.delete-task(task.id) }
                                }

                                states [
                                    hovered when delete-touch.has-hover: {
                                        background: #f75e5e;
                                    }
                                ]
                            }

                        }
                    }
                }
            }

            // for task-status in [
            //     TaskStatus.Pending,
            //     TaskStatus.Cancelled,
            //     TaskStatus.Completed,
            //     TaskStatus.Cancelled,
            //     TaskStatus.Completed,
            //     TaskStatus.Completed,
            //     TaskStatus.Pending,
            //     TaskStatus.Cancelled,
            //     TaskStatus.Pending,
            //     TaskStatus.Pending,
            //     TaskStatus.Cancelled
            // ]: Rectangle {
            //     task := TaskBox {
            //         status: task-status;
            //         text: "dmwadwandk dnakwjda wdjawnkdjanwkdnkawjdn";

            //         clicked => {
            //             context-menu.show();
            //         }
            //     }
            //     context-menu := PopupWindow {

            //         Rectangle {
            //             border-radius: 5px;
            //             background: Theme.background-light.transparentize(0.05);

            //             VerticalLayout {
            //                 spacing: 2px;
            //                 padding: 5px;
                            
            //                 if task-status != TaskStatus.Completed: complete-option := Rectangle {
            //                     border-radius: 4px;
            //                     animate background {
            //                         duration: 150ms;
            //                         easing: ease;
            //                     }

            //                     HorizontalBox {
            //                         spacing: 1rem;

            //                         Rectangle {
            //                             width: 18px;
            //                             height: self.width;

            //                             Image {
            //                                 source: @image-url("../../assets/icons/radio_checked.svg");
            //                                 image-fit: contain;
            //                                 width: 100%;
            //                                 colorize: get_color(TaskStatus.Completed);
            //                             }
            //                         }
            //                         Text {
            //                             text: "Mark as done";
            //                             font-size: 11pt;
            //                             vertical-alignment: center;
            //                             horizontal-alignment: left;
            //                             color: get_color(TaskStatus.Completed);
            //                         }
            //                     }
            //                     complete-touch := TouchArea {
            //                         mouse-cursor: MouseCursor.pointer;
            //                         clicked => { task-status = TaskStatus.Completed }
            //                     }

            //                     states [
            //                         hovered when complete-touch.has-hover: {
            //                             background: #ccc.transparentize(0.50);
            //                         }
            //                     ]
            //                 }
            //                 if task-status != TaskStatus.Pending: pending-option := Rectangle {
            //                     border-radius: 4px;
            //                     animate background {
            //                         duration: 150ms;
            //                         easing: ease;
            //                     }

            //                     HorizontalBox {
            //                         spacing: 1rem;

            //                         Rectangle {
            //                             width: 18px;
            //                             height: self.width;

            //                             Image {
            //                                 source: @image-url("../../assets/icons/radio_unchecked.svg");
            //                                 image-fit: contain;
            //                                 width: 100%;
            //                                 colorize: get_color(TaskStatus.Pending);
            //                             }
            //                         }
            //                         Text {
            //                             text: "Mark as pending";
            //                             font-size: 11pt;
            //                             vertical-alignment: center;
            //                             horizontal-alignment: left;
            //                             color: get_color(TaskStatus.Pending);
            //                         }
            //                     }
            //                     pending-touch := TouchArea {
            //                         mouse-cursor: MouseCursor.pointer;
            //                         clicked => { task-status = TaskStatus.Pending }
            //                     }

            //                     states [
            //                         hovered when pending-touch.has-hover: {
            //                             background: #ccc.transparentize(0.50);
            //                         }
            //                     ]
            //                 }
            //                 if task-status != TaskStatus.Cancelled: cancel-option := Rectangle {
            //                     border-radius: 4px;
            //                     animate background {
            //                         duration: 150ms;
            //                         easing: ease;
            //                     }

            //                     HorizontalBox {
            //                         spacing: 1rem;

            //                         Rectangle {
            //                             width: 18px;
            //                             height: self.width;

            //                             Image {
            //                                 source: @image-url("../../assets/icons/radio_cancelled.svg");
            //                                 image-fit: contain;
            //                                 width: 100%;
            //                                 colorize: get_color(TaskStatus.Cancelled);
            //                             }
            //                         }
            //                         Text {
            //                             text: "Cancel";
            //                             font-size: 11pt;
            //                             vertical-alignment: center;
            //                             horizontal-alignment: left;
            //                             color: get_color(TaskStatus.Cancelled);
            //                         }
            //                     }
            //                     cancel-touch := TouchArea {
            //                         mouse-cursor: MouseCursor.pointer;
            //                         clicked => { task-status = TaskStatus.Cancelled }
            //                     }

            //                     states [
            //                         hovered when cancel-touch.has-hover: {
            //                             background: #ccc.transparentize(0.50);
            //                         }
            //                     ]
            //                 }
            //                 delete-option := Rectangle {
            //                     border-radius: 4px;
            //                     animate background {
            //                         duration: 150ms;
            //                         easing: ease;
            //                     }

            //                     HorizontalBox {
            //                         spacing: 1rem;

            //                         Rectangle {
            //                             width: 18px;
            //                             height: self.width;

            //                             Image {
            //                                 source: @image-url("../../assets/icons/delete.svg");
            //                                 image-fit: contain;
            //                                 width: 100%;
            //                                 colorize: delete-touch.has-hover ? Theme.foreground-darker.brighter(0.5) : #f75e5e;
            //                             }
            //                         }
            //                         Text {
            //                             text: "Delete";
            //                             font-size: 11pt;
            //                             vertical-alignment: center;
            //                             horizontal-alignment: left;
            //                             color: delete-touch.has-hover ? #fff : #f75e5e;
            //                         }
            //                     }
            //                     delete-touch := TouchArea {
            //                         mouse-cursor: MouseCursor.pointer;
            //                         clicked => {}
            //                     }

            //                     states [
            //                         hovered when delete-touch.has-hover: {
            //                             background: #f75e5e;
            //                         }
            //                     ]
            //                 }

            //             }
            //         }
            //     }
            // }
        }
    }

}